unit resHandling;interface	uses		script, utils,{}		FSpCompat;	procedure DumpToFiles;	procedure ChangeToNewResType;implementation	function GetResTypeFromDialog (whichDialog: dialogPtr): str255;	{ Doesn't do any validation indicating whether it's a valid OSType: it just returns whatever the field contains }	begin		GetResTypeFromDialog := GetDItemText(whichDialog, iResTypeField);	end;	function GetLowDumpFromDialog (whichDialog: dialogPtr): integer;		var			tempNum: longint;	begin								{ #FIXME: doesn't check to see if the input was actually numeric }		StringToNum(GetDItemText(whichDialog, iLowestIDField), tempNum);		GetLowDumpFromDialog := tempNum;	end;	function GetHighDumpFromDialog (whichDialog: dialogPtr): integer;		var			tempNum: longint;	begin								{ #FIXME: doesn't check to see if the input was actually numeric }		StringToNum(GetDItemText(whichDialog, iHighestIDField), tempNum);		GetHighDumpFromDialog := tempNum;	end;	function GetOutputFileTypeFromDialog (whichDialog: dialogPtr): str255;	{ Doesn't do any validation indicating whether it's a valid OSType: it just returns whatever the field contains }	begin		GetOutputFileTypeFromDialog := GetDItemText(whichDialog, iOutputFileTypeField);	end;	function GetOutputFileCreatorFromDialog (whichDialog: dialogPtr): str255;	{ Doesn't do any validation indicating whether it's a valid OSType: it just returns whatever the field contains }	begin		GetOutputFileCreatorFromDialog := GetDItemText(whichDialog, iOutputFileCreatorField);	end;	function IsValidFileDumpParameterDialog (whichDialog: DialogPtr): boolean;	begin		IsValidFileDumpParameterDialog := true;		if length(GetResTypeFromDialog(whichDialog)) <> 4 then			begin				DoErrorAlert('The resource type you specify must have exactly four characters!', noErr);				IsValidFileDumpParameterDialog := false;			end		else if length(GetOutputFileTypeFromDialog(whichDialog)) <> 4 then			begin				DoErrorAlert('The output file type you specify must have exactly four characters!', noErr);				IsValidFileDumpParameterDialog := false;			end		else if length(GetOutputFileCreatorFromDialog(whichDialog)) <> 4 then			begin				DoErrorAlert('The output file creator you specify must have exactly four characters!', noErr);				IsValidFileDumpParameterDialog := false;			end		else if (NumFromString(GetDItemText(whichDialog, iLowestIDField)) > maxint) or (NumFromString(GetDItemText(whichDialog, iLowestIDField)) < (-maxint - 1)) then			begin				DoErrorAlert('Resource IDs must be between -32768 and 32767!', noErr);				IsValidFileDumpParameterDialog := false;			end		else if (NumFromString(GetDItemText(whichDialog, iHighestIDField)) > maxint) or (NumFromString(GetDItemText(whichDialog, iHighestIDField)) < (-maxint - 1)) then			begin				DoErrorAlert('Resource IDs must be between -32768 and 32767!', noErr);				IsValidFileDumpParameterDialog := false;			end;	end;	function ExtractFileDumpParameters (whichDialog: DialogPtr;									var resType: OSType;									var lowDump, highDump: integer;									var outputFType, outputCreator: OSType): OSErr;	begin		resType := GetResTypeFromDialog(whichDialog);		lowDump := GetLowDumpFromDialog(whichDialog);		highDump := GetHighDumpFromDialog(whichDialog);		outputFType := GetOutputFileTypeFromDialog(whichDialog);		outputCreator := GetOutputFileCreatorFromDialog(whichDialog);		ExtractFileDumpParameters := noErr;	end;	function GetFileDumpParameters (whichFile: FSSpec;									var resType: OSType;									var lowDump, highDump: integer;									var outputFType, outputCreator: OSType): OSErr;		var			theDialog: dialogPtr;			oldPort: grafPtr;			valid: boolean;			theItem: integer;	begin		valid := false;		ParamText(whichFile.name, '', '', '');		theDialog := GetNewDialog(rDumpToFilesDLOG, nil, windowPtr(-1));		if theDialog <> nil then			begin				GetPort(oldPort);				showWindow(theDialog);				SetPort(theDialog);				setUserItemDrawProc(theDialog, iButtonOutline, @drawDefaultButtonOutline);				while not valid do					begin						repeat							ModalDialog(@StandardFilter, theItem);						until (theItem = iOK) or (theItem = iCancel);						if theItem = iCancel then							begin								valid := true;								GetFileDumpParameters := userCanceledErr;							end						else if IsValidFileDumpParameterDialog(theDialog) then							begin								if ExtractFileDumpParameters(theDialog, resType, lowDump, highDump, outputFType, outputCreator) = noErr then									begin										valid := true;										GetFileDumpParameters := noErr;									end;							end;					end;				DisposeDialog(theDialog);				setPort(oldPort);			end		else			;	end;	procedure DumpResourcesToFiles (sourceFile: FSSpec;									whichResType: OSType;									loIDtoDump, hiIDtoDump: integer;									outputFType, outputCreator: OSType);		var			whereToSave, currentDataFile: FSSpec;			resFileRefNum: integer;			err: OSErr;			index, numResources: integer;			continue: boolean;			theResourceHandle: handle;			resourceID: integer;			newDirID: longint;			currentDataFileName: str255;			currentDataFileRefNum: integer;			bytesWritten: longint;			numDumped: integer;			oldState: signedByte;	begin		err := SelectSaveLocation('Please choose where to dump the resulting resource file(s)', whereToSave);		if err = noErr then			begin				resFileRefNum := FSpOpenResFileCompat(sourceFile, fsCurPerm);				if resFileRefNum = -1 then					begin						err := resError;						DoErrorAlert('Could not open the file to extract resources!', err);					end			end;		if err = noErr then			begin				numResources := Count1Resources(whichResType);				err := resError;				if err <> noErr then					DoErrorAlert('Unable to count resources of requested type!', err);				if numResources < 1 then					begin						DoErrorAlert('There are no resources of the requested type in the file specified!', ResError);						err := userCanceledErr;					end;			end;		if err = NoErr then			begin				err := FSpDirCreateCompat(whereToSave, smSystemScript, newDirID);				if err <> noErr then					DoErrorAlert('Unable to create directory for target files!', err);			end;		if err = noErr then			begin				continue := true;				index := 1;				numDumped := 0;				while (continue) and (index < (1 + numResources)) do					begin						theResourceHandle := Get1IndResource(whichResType, index);						err := resError;						resourceID := GetResourceID(theResourceHandle);						if (resourceID < loIDtoDump) or (resourceID > hiIDtoDump) then							err := userCanceledErr;						if err = noErr then							begin								oldState := HGetState(theResourceHandle);								HLock(theResourceHandle);								err := MemError;								if err <> noErr then									DoErrorAlert('Unable to lock the data in memory!', err);								if err = noErr then									begin										currentDataFileName := concat(whichResType, ' - ', StringFromNum(resourceID));										err := FSMakeFSSpecCompat(whereToSave.vRefNum, newDirID, currentDataFileName, currentDataFile);										if (err <> noErr) and (err <> fnfErr) then											DoErrorAlert('Unable to create a file descriptor for new dump file!', err);										if err = fnfErr then											err := noErr;									end;								if err = noErr then									begin										err := FSpCreateCompat(currentDataFile, outputCreator, outputFType, smSystemScript);										if (err <> noErr) and (err <> fnfErr) then											DoErrorAlert('Unable to create a file description for the data file!', err);									end;								if err = noErr then									begin										err := FSpOpenDF(currentDataFile, fsWrPerm, currentDataFileRefNum);										if err <> noErr then											DoErrorAlert('Unable to open the newly created data file for writing!', err);									end;								if err = noErr then									begin										bytesWritten := GetHandleSize(theResourceHandle);										err := FSWrite(currentDataFileRefNum, bytesWritten, theResourceHandle^);										if err <> noErr then											DoErrorAlert('Unable to write the data to disk!', err);									end;								if err = noErr then									begin										err := FSClose(currentDataFileRefNum);										if err <> noErr then											DoErrorAlert('Unable to close the data file after writing!', err);									end;								if err <> noErr then									begin										continue := false;			{ #FIXME: ask the user whether to continue or not!}									end								else									begin										HSetState(theResourceHandle, oldState);										ReleaseResource(theResourceHandle);										numDumped := numDumped + 1;									end;							end;						index := index + 1;					end;				DisplayInformationalAlert(concat('Dumped ', StringFromNum(numDumped), ' total resource(s)!'));			end;	end;	procedure DumpToFiles;		var			whichFile: FSSpec;			err: OSErr;			whichResType: OSType;			loResIDtoDump, hiResIDtoDump: integer;			outputFType, outputCreator: OSType;	begin		err := SelectFileToDump('Dump resources from which file?', whichFile);		if err = noErr then		{ We will have already reported any errors }			err := GetFileDumpParameters(whichFile, whichResType, loResIDToDump, hiResIDtoDump, outputFType, outputCreator);		if err = noErr then			DumpResourcesToFiles(whichFile, whichResType, loResIDtoDump, hiResIDtoDump, outputFType, outputCreator);	end;	function GetOrigResTypeFromDialog (whichDialog: dialogPtr): str255;	{ Doesn't do any validation indicating whether it's a valid OSType: it just returns whatever the field contains }	begin		GetOrigResTypeFromDialog := GetDItemText(whichDialog, iOriginalTypeField);	end;	function GetNewResTypeFromDialog (whichDialog: dialogPtr): str255;	{ Doesn't do any validation indicating whether it's a valid OSType: it just returns whatever the field contains }	begin		GetNewResTypeFromDialog := GetDItemText(whichDialog, iNewTypeField);	end;	function isValidResourceConversionDialog (theDialog: dialogPtr): boolean;	begin		isValidResourceConversionDialog := true;		if (length(GetNewResTypeFromDialog(theDialog)) <> 4) or (length(GetOrigResTypeFromDialog(theDialog)) <> 4) then			begin				DoErrorAlert('Resource types must have exactly four characters!', noErr);				isValidResourceConversionDialog := false;			end;	end;	function extractResourceConversionParameters (theDialog: dialogPtr;									var inResType, outResType: OSType): OSErr;	begin		inResType := GetOrigResTypeFromDialog(theDialog);		outResType := GetNewResTypeFromDialog(theDialog);		extractResourceConversionParameters := noErr;	end;	function GetResourceConversionParameters (whichFile: FSSpec;									var inResType, outResType: OSType): OSErr;		var			valid: boolean;			theDialog: DialogPtr;			theItem: integer;			oldPort: grafPtr;	begin		GetResourceConversionParameters := noErr;		valid := false;		ParamText(whichFile.name, '', '', '');		theDialog := GetNewDialog(rRetypeResourceDLOG, nil, windowPtr(-1));		if theDialog <> nil then			begin				GetPort(oldPort);				showWindow(theDialog);				SetPort(theDialog);				setUserItemDrawProc(theDialog, iButtonOutline, @drawDefaultButtonOutline);				while not valid do					begin						repeat							ModalDialog(@StandardFilter, theItem);						until (theItem = iOK) or (theItem = iCancel);						if theItem = iOK then							begin								if isValidResourceConversionDialog(theDialog) then									if extractResourceConversionParameters(theDialog, inResType, outResType) = noErr then										valid := true;							end						else if theItem = iCancel then							begin								valid := true;								GetResourceConversionParameters := userCanceledErr;							end;					end;				DisposeDialog(theDialog);				setPort(oldPort);			end		else			DoErrorAlert('Unable to create the resource conversion parameters dialog box!', MemError);	end;	procedure doConvertResourcesToNewType (inFile: FSSpec;									oldResType, newResType: OSType);		var			err: OSerr;			whereToSave: FSSpec;			sourceRefNum, destRefNum: integer;			numResources: integer;			continue: boolean;			theResHandle: handle;			theResType: ResType;			theResName: str255;			theResAttrs: integer;			theResID: integer;			count: integer;	begin		err := SelectSaveLocation('New resource file location?', whereToSave);		if err = noErr then			begin				sourceRefNum := FSpOpenResFileCompat(inFile, fsRdPerm);				err := ResError;				if err <> noErr then					DoErrorAlert('Unable to open the source file!', err);			end;		if err = noErr then			begin				numResources := count1Resources(oldResType);				err := ResError;				if err <> noErr then					DoErrorAlert('Unable to determine number of resources in source file!', err);				if numResources < 1 then					DoErrorAlert('There are no resources of the specified type in the specified file!', err);			end;		if err = noErr then			begin				FSpCreateResFileCompat(whereToSave, 'RSED', 'rsrc', smSystemScript);				err := ResError;				if err <> noErr then					DoErrorAlert('Unable to create the output file!', err);			end;		if err = noErr then			begin				destRefNum := FSpOpenResFileCompat(whereToSave, fsWrPerm);				err := ResError;				if err <> noErr then					DoErrorAlert('Unable to open the newly created output file!', err);			end;		if err = noErr then			begin				continue := true;				count := 1;				while (continue) and (count <= numResources) do					begin						useResFile(sourceRefNum);						theResHandle := Get1IndResource(oldResType, count);						err := ResError;						if err <> noErr then							begin								DoErrorAlert('Unable to get a resource from the source file!', err);								continue := false;		{ #FIXME! ask the user what to do. }							end;						if err = noErr then							begin								GetResInfo(theResHandle, theResID, theResType, theResName);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to get resource info from original file!', err);										continue := false;									end;							end;						if err = noErr then							begin								theResAttrs := GetResAttrs(theResHandle);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to determine attributes of original resource!', err);										continue := false;									end;							end;						if err = noErr then							begin								DetachResource(theResHandle);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to detach the resource from the original file!', err);										continue := false;									end;							end;						if err = noErr then							begin								useResFile(destRefNum);								AddResource(theResHandle, newResType, theResID, theResName);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to add re-typed resource to new file!', err);										continue := false;									end;							end;						if err = noErr then							begin								SetResAttrs(theResHandle, theResAttrs);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to set the appropriate attributes on the new resource!', err);										continue := false;									end;							end;						if err = noErr then							begin								ChangedResource(theResHandle);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to mark the new resource as changed!', err);										continue := false;									end;							end;						if err = noErr then							begin								WriteResource(theResHandle);								err := ResError;								if err <> noErr then									begin										DoErrorAlert('Unable to write the new resource to disk!', err);										continue := false;									end;							end;						count := count + 1;					end;			end;		if err = noErr then			begin				CloseResFIle(sourceRefNum);				err := ResError;				if err <> noErr then					DoErrorAlert('Unable to close the source file!', err);			end;		if err = noErr then			begin				CloseResFile(destRefNum);				err := resError;				if err <> noErr then					DoErrorAlert('Unable to close the destination file!', err);			end;		if err = noErr then			DisplayInformationalAlert(concat('Successfully re-typed ', StringFromNum(count), ' resources!'));	end;	procedure ChangeToNewResType;		var			whichFile: FSSpec;			inResType, outResType: OSType;			err: OSErr;	begin		err := SelectFileToDump('Convert resources from which file?', whichFIle);		if err = noErr then			err := GetResourceConversionParameters(whichFile, inResType, outResType);		if err = noErr then			doConvertResourcesToNewType(whichFile, inResType, outResType);	end;end.